<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="pull__all_8py" kind="file" language="Python">
    <compoundname>pull_all.py</compoundname>
    <innernamespace refid="namespacepull__all">pull_all</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespacepull__all" refkind="compound"><highlight class="comment">#!/usr/bin/env<sp/>python3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;&quot;&quot;Image<sp/>Pulling<sp/>script<sp/>for<sp/>UAF-Plankline</highlight></codeline>
<codeline lineno="3"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="4"><highlight class="stringliteral">Usage:</highlight></codeline>
<codeline lineno="5"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>./pull_all.py<sp/>-d<sp/>&lt;project<sp/>directory&gt;</highlight></codeline>
<codeline lineno="6"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="7"><highlight class="stringliteral">License:</highlight></codeline>
<codeline lineno="8"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>MIT<sp/>License</highlight></codeline>
<codeline lineno="9"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="10"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Copyright<sp/>(c)<sp/>2023<sp/>Thomas<sp/>Kelly</highlight></codeline>
<codeline lineno="11"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="12"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining<sp/>a<sp/>copy</highlight></codeline>
<codeline lineno="13"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal</highlight></codeline>
<codeline lineno="14"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>in<sp/>the<sp/>Software<sp/>without<sp/>restriction,<sp/>including<sp/>without<sp/>limitation<sp/>the<sp/>rights</highlight></codeline>
<codeline lineno="15"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell</highlight></codeline>
<codeline lineno="16"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>copies<sp/>of<sp/>the<sp/>Software,<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is</highlight></codeline>
<codeline lineno="17"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="18"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="19"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in<sp/>all</highlight></codeline>
<codeline lineno="20"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="21"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="22"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="23"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="24"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="25"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER</highlight></codeline>
<codeline lineno="26"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,</highlight></codeline>
<codeline lineno="27"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE</highlight></codeline>
<codeline lineno="28"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="29"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>os</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>glob</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>argparse</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>csv<sp/></highlight><highlight class="comment">#<sp/>to<sp/>parse<sp/>all<sp/>of<sp/>the<sp/>csv<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>tarfile<sp/></highlight><highlight class="comment">#<sp/>untar<sp/>the<sp/>images</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>re</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>shutil<sp/></highlight><highlight class="comment">#<sp/>for<sp/>copying<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">#<sp/>arg<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">directory(arg):</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>os.path.isdir(arg):</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>argparse.ArgumentTypeError(</highlight><highlight class="stringliteral">&quot;Not<sp/>a<sp/>valid<sp/>directory<sp/>path&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">csv_type(arg):</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>os.path.isfile(arg):</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>argparse.ArgumentTypeError(</highlight><highlight class="stringliteral">&quot;Not<sp/>a<sp/>file&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>arg.endswith(</highlight><highlight class="stringliteral">&quot;.csv&quot;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>argparse.ArgumentTypeError(</highlight><highlight class="stringliteral">&quot;Not<sp/>a<sp/>csv<sp/>file&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">float01(arg):</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>float(arg):</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>argparse.ArgumentTypeError(</highlight><highlight class="stringliteral">&quot;Not<sp/>a<sp/>floating<sp/>point<sp/>number&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>arg<sp/>=<sp/>float(arg)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>(arg<sp/>&lt;<sp/>1.0<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>arg<sp/>&gt;<sp/>0.0):</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>argparse.ArgumentTypeError(</highlight><highlight class="stringliteral">&quot;Not<sp/>a<sp/>floating<sp/>point<sp/>value<sp/>between<sp/>0<sp/>and<sp/>1&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">#<sp/>check<sp/>to<sp/>make<sp/>sure<sp/>the<sp/>image<sp/>doesn&apos;t<sp/>already<sp/>exist.<sp/>Some<sp/>images<sp/>in<sp/>different<sp/>tars<sp/>are<sp/>given<sp/>the<sp/>same<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">add_unique_postfix(fn):</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>os.path.exists(fn):<sp/></highlight><highlight class="comment">#<sp/>if<sp/>the<sp/>file<sp/>name<sp/>doesn&apos;t<sp/>exist,<sp/>don&apos;t<sp/>change<sp/>the<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fn</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>path,<sp/>name<sp/>=<sp/>os.path.split(fn)</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>name,<sp/>ext<sp/>=<sp/>os.path.splitext(name)</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>make_fn<sp/>=<sp/></highlight><highlight class="keyword">lambda</highlight><highlight class="normal"><sp/>i:<sp/>os.path.join(path,<sp/></highlight><highlight class="stringliteral">&apos;%s(%d)%s&apos;</highlight><highlight class="normal"><sp/>%<sp/>(name,<sp/>i,<sp/>ext))</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(2,<sp/>10000):<sp/></highlight><highlight class="comment">#<sp/>finds<sp/>a<sp/>number<sp/>that<sp/>is<sp/>not<sp/>used<sp/>to<sp/>put<sp/>as<sp/>the<sp/>suffix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uni_fn<sp/>=<sp/>make_fn(i)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>os.path.exists(uni_fn):</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>uni_fn</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">get_parser():<sp/></highlight><highlight class="comment">#<sp/>get<sp/>command<sp/>line<sp/>options</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>parser<sp/>=<sp/>argparse.ArgumentParser(description=</highlight><highlight class="stringliteral">&quot;Tool<sp/>that<sp/>was<sp/>created<sp/>to<sp/>help<sp/>expand<sp/>the<sp/>data<sp/>for<sp/>the<sp/>taxon<sp/>that<sp/>we<sp/>do<sp/>not<sp/>have<sp/>many<sp/>images<sp/>of<sp/>by<sp/>utilizing<sp/>the<sp/>data<sp/>from<sp/>the<sp/>images<sp/>that<sp/>were<sp/>already<sp/>classified.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>you<sp/>should<sp/>do<sp/>many<sp/>taxon<sp/>at<sp/>once<sp/>since<sp/>a<sp/>lot<sp/>of<sp/>the<sp/>time<sp/>is<sp/>lost<sp/>unzipping<sp/>files<sp/>so<sp/>it<sp/>is<sp/>only<sp/>slightly<sp/>less<sp/>efficient</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>parser.add_argument(</highlight><highlight class="stringliteral">&quot;-t&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--taxon&quot;</highlight><highlight class="normal">,<sp/>required=</highlight><highlight class="keyword">False</highlight><highlight class="normal">,<sp/>type=str,<sp/>nargs=</highlight><highlight class="stringliteral">&apos;+&apos;</highlight><highlight class="normal">,<sp/>help=</highlight><highlight class="stringliteral">&quot;The<sp/>taxons<sp/>that<sp/>you<sp/>are<sp/>looking<sp/>to<sp/>find<sp/>from<sp/>the<sp/>csv<sp/>files.<sp/>This<sp/>should<sp/>be<sp/>given<sp/>as<sp/>a<sp/>list<sp/>of<sp/>taxon<sp/>separated<sp/>by<sp/>a<sp/>space.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>selectgroup<sp/>=<sp/>parser.add_mutually_exclusive_group(required=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>selectgroup.add_argument(</highlight><highlight class="stringliteral">&quot;-p&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--probability_taxon&quot;</highlight><highlight class="normal">,<sp/>type=float01,<sp/>help=</highlight><highlight class="stringliteral">&quot;The<sp/>probability<sp/>that<sp/>a<sp/>taxon<sp/>needs<sp/>to<sp/>be<sp/>over<sp/>for<sp/>the<sp/>program<sp/>to<sp/>extract<sp/>image<sp/>extract<sp/>the<sp/>image,<sp/>this<sp/>should<sp/>be<sp/>a<sp/>value<sp/>between<sp/>(0,1)&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>selectgroup.add_argument(</highlight><highlight class="stringliteral">&quot;-b&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--best_taxon&quot;</highlight><highlight class="normal">,<sp/>action=</highlight><highlight class="stringliteral">&quot;store_true&quot;</highlight><highlight class="normal">,<sp/>help=</highlight><highlight class="stringliteral">&quot;Extracts<sp/>the<sp/>images<sp/>if<sp/>the<sp/>image<sp/>was<sp/>classified<sp/>as<sp/>a<sp/>certain<sp/>taxa,<sp/>that<sp/>is<sp/>one<sp/>of<sp/>the<sp/>taxons<sp/>that<sp/>you<sp/>are<sp/>trying<sp/>to<sp/>find.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>inputgroup<sp/>=<sp/>parser.add_mutually_exclusive_group(required=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>inputgroup.add_argument(</highlight><highlight class="stringliteral">&quot;-d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--input_drive&quot;</highlight><highlight class="normal">,<sp/>type=directory,<sp/>help=</highlight><highlight class="stringliteral">&quot;The<sp/>directory<sp/>that<sp/>you<sp/>want<sp/>to<sp/>be<sp/>pulling<sp/>csv<sp/>files<sp/>from<sp/>to<sp/>look<sp/>for<sp/>images&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>inputgroup.add_argument(</highlight><highlight class="stringliteral">&quot;-c&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--input_csv&quot;</highlight><highlight class="normal">,<sp/>type=csv_type,<sp/>help=</highlight><highlight class="stringliteral">&quot;The<sp/>csv<sp/>file<sp/>that<sp/>you<sp/>want<sp/>to<sp/>look<sp/>for<sp/>taxon<sp/>images.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>parser.add_argument(</highlight><highlight class="stringliteral">&quot;-o&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--output&quot;</highlight><highlight class="normal">,<sp/>required=</highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>type=directory,<sp/>help=</highlight><highlight class="stringliteral">&quot;The<sp/>directory<sp/>that<sp/>you<sp/>want<sp/>to<sp/>put<sp/>the<sp/>taxon<sp/>folders<sp/>of<sp/>images&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>parser.add_argument(</highlight><highlight class="stringliteral">&quot;-r&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--raw_tars&quot;</highlight><highlight class="normal">,<sp/>required=</highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>type=directory,<sp/>help=</highlight><highlight class="stringliteral">&quot;The<sp/>directory<sp/>of<sp/>all<sp/>of<sp/>the<sp/>tar<sp/>images<sp/>that<sp/>correspond<sp/>to<sp/>the<sp/>csv<sp/>data&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>parser.add_argument(</highlight><highlight class="stringliteral">&quot;-m&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--min_images&quot;</highlight><highlight class="normal">,<sp/>type=int,<sp/>default=0,<sp/>help=</highlight><highlight class="stringliteral">&quot;The<sp/>minimum<sp/>number<sp/>of<sp/>images<sp/>you<sp/>need<sp/>to<sp/>have<sp/>in<sp/>a<sp/>tar.gz<sp/>in<sp/>order<sp/>to<sp/>unzip<sp/>it,<sp/>this<sp/>defaults<sp/>to<sp/>0&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>parser.add_argument(</highlight><highlight class="stringliteral">&quot;-dc&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--different_columns&quot;</highlight><highlight class="normal">,<sp/>action=</highlight><highlight class="stringliteral">&quot;store_true&quot;</highlight><highlight class="normal">,<sp/>default=</highlight><highlight class="keyword">False</highlight><highlight class="normal">,<sp/>help=</highlight><highlight class="stringliteral">&quot;Checks<sp/>all<sp/>of<sp/>the<sp/>csvs<sp/>and<sp/>tar.gz<sp/>files.<sp/>This<sp/>should<sp/>be<sp/>used<sp/>if<sp/>the<sp/>csv<sp/>files<sp/>do<sp/>not<sp/>follow<sp/>the<sp/>same<sp/>pattern.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>parser.add_argument(</highlight><highlight class="stringliteral">&quot;-s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--strict_subclasses&quot;</highlight><highlight class="normal">,<sp/>action=</highlight><highlight class="stringliteral">&quot;store_true&quot;</highlight><highlight class="normal">,<sp/>default=</highlight><highlight class="keyword">False</highlight><highlight class="normal">,<sp/>help=</highlight><highlight class="stringliteral">&quot;Doesn&apos;t<sp/>find<sp/>any<sp/>substrings,<sp/>only<sp/>uses<sp/>the<sp/>taxon<sp/>names<sp/>that<sp/>you<sp/>input<sp/>exactly&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>parser</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">validate_args(parser):<sp/></highlight><highlight class="comment">#<sp/>verify<sp/>the<sp/>command<sp/>line<sp/>options<sp/>that<sp/>the<sp/>user<sp/>plugged<sp/>in<sp/>and<sp/>print<sp/>them<sp/>out</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>args<sp/>=<sp/>parser.parse_args()</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>tars_dir<sp/>=<sp/>args.raw_tars</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>csvs<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>file_dict<sp/>=<sp/>{}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>if(args.input_drive):<sp/></highlight><highlight class="comment">#<sp/>several<sp/>csv<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>csvs<sp/>=<sp/>glob.glob(args.input_drive<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/*.csv&quot;</highlight><highlight class="normal">)</highlight><highlight class="comment">#<sp/>do<sp/>something<sp/>here<sp/>so<sp/>that<sp/>program<sp/>goes<sp/>through<sp/>and<sp/>gets<sp/>all<sp/>of<sp/>the<sp/>csv<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(len(csvs)<sp/>==<sp/>0):</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser.error(</highlight><highlight class="stringliteral">&quot;-d,<sp/>--input_drive<sp/>Directory<sp/>does<sp/>not<sp/>contain<sp/>any<sp/>csv<sp/>files&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;Input<sp/>Drive:<sp/>%s&quot;</highlight><highlight class="normal"><sp/>%<sp/>(args.input_drive))</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;Number<sp/>of<sp/>Input<sp/>CSVs:<sp/>%d&quot;</highlight><highlight class="normal"><sp/>%<sp/>(len(csvs)))</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>create<sp/>dictionary<sp/>linking<sp/>between<sp/>tar<sp/>files<sp/>and<sp/>csvs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file_dict<sp/>=<sp/>{}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>tar<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>os.listdir(tars_dir):</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unique_name<sp/>=<sp/>os.path.basename(tar).replace(</highlight><highlight class="stringliteral">&quot;.tar&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matches<sp/>=<sp/>glob.glob(str(args.input_drive)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/*&quot;</highlight><highlight class="normal"><sp/>+<sp/>str(unique_name)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;*.csv&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len(matches)<sp/>&gt;=<sp/>1):</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>csv_filename<sp/>=<sp/>matches[0]</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(csv_filename<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>file_dict):</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file_dict[csv_filename]<sp/>=<sp/>os.path.join(tars_dir,<sp/>tar)</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;Error:<sp/>More<sp/>than<sp/>one<sp/>tar<sp/>file<sp/>have<sp/>been<sp/>matched<sp/>with<sp/>a<sp/>csv<sp/>file.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit()</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">#<sp/>a<sp/>single<sp/>csv<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;Input<sp/>CSV:&quot;</highlight><highlight class="normal">,<sp/>args.input_csv)</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>tar<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>os.listdir(tars_dir):</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unique_name<sp/>=<sp/>os.path.basename(tar).replace(</highlight><highlight class="stringliteral">&quot;.tar&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unique_name<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>os.path.basename(args.input_csv)):</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(args.input_csv<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>file_dict):</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file_dict[args.input_csv]<sp/>=<sp/>os.path.join(tars_dir,<sp/>tar)</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;Error:<sp/>More<sp/>than<sp/>one<sp/>tar<sp/>file<sp/>have<sp/>been<sp/>matched<sp/>with<sp/>the<sp/>given<sp/>csv<sp/>file.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit()</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>csvs.append(args.input_csv)</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>csv_file<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>csvs:</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(csv_file<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>file_dict):</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(file_dict)</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser.error(</highlight><highlight class="stringliteral">&quot;r,<sp/>--raw_tars<sp/>does<sp/>not<sp/>have<sp/>a<sp/>corresponding<sp/>tar<sp/>for<sp/>the<sp/>csv<sp/>file<sp/>%s&quot;</highlight><highlight class="normal"><sp/>%<sp/>csv_file)</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;Raw<sp/>tar<sp/>Directory:&quot;</highlight><highlight class="normal">,<sp/>tars_dir)</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>if(args.output):</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_dir<sp/>=<sp/>args.output</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(len(glob.glob(out_dir<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/*&quot;</highlight><highlight class="normal">))<sp/>&gt;<sp/>0):</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser.error(</highlight><highlight class="stringliteral">&quot;-o,<sp/>--output<sp/>Directory<sp/>can<sp/>not<sp/>contain<sp/>any<sp/>any<sp/>files<sp/>or<sp/>directories<sp/>so<sp/>that<sp/>we<sp/>can<sp/>avoid<sp/>overwriting<sp/>existing<sp/>files.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;Output<sp/>Directory:&quot;</highlight><highlight class="normal">,<sp/>out_dir)</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>min_images<sp/>=<sp/>args.min_images</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>if(min_images<sp/>&lt;<sp/>0):</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser.error(</highlight><highlight class="stringliteral">&quot;-m,<sp/>--min_images<sp/>The<sp/>minimum<sp/>numbers<sp/>of<sp/>images<sp/>you<sp/>extract<sp/>needs<sp/>to<sp/>be<sp/>a<sp/>positive<sp/>integer.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;Minimum<sp/>images<sp/>needed<sp/>to<sp/>unzip:&quot;</highlight><highlight class="normal">,<sp/>min_images)</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>if(args.best_taxon):</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;\n-----<sp/>Finding<sp/>chosen<sp/>taxon<sp/>where<sp/>they<sp/>are<sp/>the<sp/>top<sp/>probability<sp/>-----&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>probability<sp/>=<sp/>args.probability_taxon</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;\n-----<sp/>Finding<sp/>chosen<sp/>taxon<sp/>with<sp/>probabilities<sp/>above<sp/>%s<sp/>-----&quot;</highlight><highlight class="normal"><sp/>%<sp/>probability)</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>csvs,<sp/>tars_dir,<sp/>out_dir,<sp/>file_dict,<sp/>min_images,<sp/>args.best_taxon,<sp/>args.probability_taxon,<sp/>args.different_columns,<sp/>args.strict_subclasses</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">find_all_taxon(csv):<sp/></highlight><highlight class="comment">#<sp/>NOTE:<sp/>this<sp/>is<sp/>assuming<sp/>the<sp/>csv&apos;s<sp/>collumns<sp/>are<sp/>all<sp/>the<sp/>same.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>taxon_exist<sp/>=<sp/>next(csv)[1:]</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>taxon_exist</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">invalid_taxon(parser,<sp/>taxon_exist,<sp/>all_taxon):<sp/></highlight><highlight class="comment">#<sp/>see<sp/>if<sp/>any<sp/>of<sp/>the<sp/>taxon<sp/>were<sp/>not<sp/>substrings<sp/>of<sp/>the<sp/>column<sp/>names<sp/>in<sp/>the<sp/>csv<sp/>files.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>args<sp/>=<sp/>parser.parse_args()</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>numInvalid<sp/>=<sp/>0<sp/></highlight><highlight class="comment">#<sp/>store<sp/>the<sp/>number<sp/>of<sp/>invalid<sp/>taxon</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i,<sp/>taxon<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>enumerate(all_taxon):</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(taxon<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>taxon_exist):</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(args.different_columns):</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numInvalid<sp/>+=<sp/>1</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;\&quot;%s\&quot;<sp/>was<sp/>ignored<sp/>since<sp/>it<sp/>isn&apos;t<sp/>a<sp/>valid<sp/>substring<sp/>of<sp/>a<sp/>taxon<sp/>name<sp/>for<sp/>this<sp/>csv<sp/>file&quot;</highlight><highlight class="normal"><sp/>%<sp/>(taxon))</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser.error(</highlight><highlight class="stringliteral">&quot;-t,<sp/>--taxon<sp/>Taxon<sp/>\&quot;%s\&quot;<sp/>is<sp/>not<sp/>a<sp/>valid<sp/>substring<sp/>of<sp/>a<sp/>taxon<sp/>name&quot;</highlight><highlight class="normal"><sp/>%<sp/>(taxon))</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>numInvalid<sp/>==<sp/>len(all_taxon):<sp/></highlight><highlight class="comment">#<sp/>determine<sp/>if<sp/>there<sp/>are<sp/>any<sp/>valid<sp/>taxon<sp/>that<sp/>were<sp/>inputted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="comment">#<sp/>print<sp/>out<sp/>all<sp/>of<sp/>the<sp/>taxon<sp/>this<sp/>program<sp/>is<sp/>searching<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">print_taxon(taxon_locations):</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;Finding<sp/>the<sp/>sub_taxon:&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i,<sp/>(taxon,<sp/>sub_taxon)<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>enumerate(taxon_locations.values()):</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;%d.<sp/>%s&quot;</highlight><highlight class="normal"><sp/>%<sp/>(i,<sp/>sub_taxon))</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">find_top(csv,<sp/>taxon_locations):</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>matched_images<sp/>=<sp/>dict()</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>row<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>csv:</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>top_col<sp/>=<sp/>1</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>col,<sp/>prob<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>enumerate(row):</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>col<sp/>&lt;<sp/>2:<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">#<sp/>skip<sp/>the<sp/>image<sp/>name<sp/>row</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>TODO<sp/>maybe<sp/>add<sp/>quickselect<sp/>here<sp/>to<sp/>get<sp/>the<sp/>top<sp/>k<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>float(prob)<sp/>&gt;<sp/>float(row[top_col]):</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>top_col<sp/>=<sp/>col</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>top_col<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>taxon_locations:<sp/></highlight><highlight class="comment">#<sp/>check<sp/>if<sp/>top_col<sp/>is<sp/>in<sp/>the<sp/>dictionary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image<sp/>=<sp/>os.path.basename(row[0])</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matched_images[image]<sp/>=<sp/>[taxon_locations[top_col]]<sp/></highlight><highlight class="comment">#<sp/>add<sp/>the<sp/>image<sp/>to<sp/>the<sp/>matched<sp/>images<sp/>dict</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>matched_images</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">find_above_prob(csv,<sp/>taxon_locations,<sp/>probability):</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>matched_images<sp/>=<sp/>dict()</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>row<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>csv:</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(len(taxon_locations)):</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>float(row[i+1])<sp/>&gt;<sp/>probability:<sp/></highlight><highlight class="comment">#<sp/>if<sp/>one<sp/>is<sp/>found<sp/>this<sp/>tar.gz<sp/>now<sp/>needs<sp/>to<sp/>be<sp/>unzipped</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image<sp/>=<sp/>os.path.basename(row[0])</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>image<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>matched_images:</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matched_images[image]<sp/>=<sp/>[taxon_locations[i]]</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matched_images[image].append(taxon_locations[i])<sp/></highlight><highlight class="comment">#<sp/>add<sp/>taxon<sp/>to<sp/>hashmap<sp/>for<sp/>the<sp/>image</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>matched_images</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">untar(tar,<sp/>out_dir):</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;Unzipping<sp/>%s<sp/>into<sp/>%s&quot;</highlight><highlight class="normal"><sp/>%<sp/>(tar,<sp/>out_dir))</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>tarfile.open(tar,<sp/></highlight><highlight class="stringliteral">&apos;r&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">#<sp/>set<sp/>up<sp/>the<sp/>file<sp/>pointer<sp/>for<sp/>the<sp/>tar<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>t.extractall(out_dir)<sp/></highlight><highlight class="comment">#<sp/>all<sp/>images<sp/>into<sp/>the<sp/>out_dir</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">build_structure(path_array,<sp/>taxon_locations):</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>enumerate(path_array):<sp/></highlight><highlight class="comment">#<sp/>shouldn&apos;t<sp/>ever<sp/>be<sp/>that<sp/>many,<sp/>dependant<sp/>on<sp/>your<sp/>minimum<sp/>detection<sp/>probability.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dir_structure<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>+<sp/>taxon_locations<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os.makedirs(out_dir<sp/>+<sp/>dir_structure,<sp/>exist_ok<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">#<sp/>TODO:<sp/>maybe<sp/>move<sp/>this<sp/>to<sp/>another<sp/>place<sp/>so<sp/>that<sp/>it<sp/>is<sp/>not<sp/>done<sp/>in<sp/>a<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(len(path_array)<sp/>&gt;<sp/>1):<sp/></highlight><highlight class="comment">#<sp/>then<sp/>we<sp/>will<sp/>need<sp/>to<sp/>copy<sp/>the<sp/>image<sp/>to<sp/>multiple<sp/>directories</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(i<sp/>&lt;<sp/>len(path_array)<sp/>-<sp/>1):</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shutil.copy2(img,<sp/>out_dir<sp/>+<sp/>dir_structure)</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">#<sp/>move<sp/>the<sp/>last<sp/>one<sp/>instead<sp/>of<sp/>copying<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shutil.move(img,<sp/>out_dir<sp/>+<sp/>dir_structure)</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:<sp/><sp/></highlight><highlight class="comment">#<sp/>move<sp/>to<sp/>one<sp/>directory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image_unique<sp/>=<sp/>add_unique_postfix(out_dir<sp/>+<sp/>dir_structure<sp/>+<sp/>os.path.basename(img))<sp/></highlight><highlight class="comment">#<sp/>make<sp/>sure<sp/>there<sp/>is<sp/>a<sp/>unique<sp/>image<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shutil.move(img,<sp/>image_unique)</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>__name__<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;__main__&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Main<sp/>entry<sp/>to<sp/>pull_all.py&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>v_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;V2023.09.05&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>parser<sp/>=<sp/>get_parser()<sp/></highlight><highlight class="comment">#<sp/>get<sp/>command<sp/>line<sp/>arguments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>csvs,<sp/>tars_dir,<sp/>out_dir,<sp/>file_dict,<sp/>min_images,<sp/>best,<sp/>probability,<sp/>different,<sp/>strict<sp/>=<sp/>validate_args(parser)<sp/></highlight><highlight class="comment">#<sp/>error<sp/>check<sp/>arguments<sp/>further</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>print(v_string)</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>print(file_dict)</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>f<sp/>=<sp/>open(csvs[0])</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>_csv<sp/>=<sp/>csv.reader(f)</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>e_taxon<sp/>=<sp/>find_all_taxon(_csv)<sp/></highlight><highlight class="comment">#<sp/>read<sp/>the<sp/>taxon<sp/>from<sp/>the<sp/>first<sp/>csv<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>f.close()</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>this<sp/>is<sp/>the<sp/>main<sp/>processing<sp/>part<sp/>of<sp/>the<sp/>program</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>csv_file<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>csvs:<sp/></highlight><highlight class="comment">#<sp/>loop<sp/>through<sp/>all<sp/>of<sp/>the<sp/>csv<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;\nFinding<sp/>images<sp/>from&quot;</highlight><highlight class="normal">,<sp/>csv_file)</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>=<sp/>open(csv_file)</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_csv<sp/>=<sp/>csv.reader(f)</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name_line<sp/>=<sp/>next(_csv)<sp/></highlight><highlight class="comment">#<sp/>remove<sp/>nameline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tar_file<sp/>=<sp/>file_dict[csv_file]</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>untar(tar_file,<sp/>out_dir)</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>taxon_locations<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>e_taxon:</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matched_images<sp/>=<sp/>dict()</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matched_images<sp/>=<sp/>find_above_prob(_csv,<sp/>taxon_locations,<sp/>probability)</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(f</highlight><highlight class="stringliteral">&quot;Found<sp/>{len(matched_images)}<sp/>images<sp/>in<sp/>{csv_file}<sp/>for<sp/>{taxon_locations}&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;Building<sp/>file<sp/>structure&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>img<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>glob.glob(out_dir<sp/>+<sp/>f</highlight><highlight class="stringliteral">&apos;/{taxon_locations}*.jpg&apos;</highlight><highlight class="normal">):<sp/></highlight><highlight class="comment">#<sp/>loop<sp/>through<sp/>all<sp/>the<sp/>images<sp/>in<sp/>the<sp/>untared<sp/>directory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path_array<sp/>=<sp/>matched_images[os.path.basename(img)]</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>build_structure(path_array,<sp/>taxon_locations)<sp/></highlight><highlight class="comment">#<sp/>move<sp/>all<sp/>of<sp/>the<sp/>images<sp/>to<sp/>the<sp/>correct<sp/>sub-directory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f.close()</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;-----<sp/>Done<sp/>-----&quot;</highlight><highlight class="normal">)</highlight></codeline>
    </programlisting>
    <location file="pull_all.py"/>
  </compounddef>
</doxygen>
